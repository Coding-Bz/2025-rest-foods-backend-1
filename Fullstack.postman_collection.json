{
	"info": {
		"_postman_id": "59ebbbfc-3eb4-4aa8-b918-975917f54e19",
		"name": "Fullstack",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43313868",
		"_collection_link": "https://interstellar-moon-487414.postman.co/workspace/Team-Workspace~7de392fd-3bf9-4238-808a-157df6cadb27/collection/43313868-59ebbbfc-3eb4-4aa8-b918-975917f54e19?action=share&source=collection_link&creator=43313868"
	},
	"item": [
		{
			"name": "MenuController",
			"item": [
				{
					"name": "GetAllMenus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/menu/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"menu",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllMenus by Allergy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/menu/allergies?allergy=gluten",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"menu",
								"allergies"
							],
							"query": [
								{
									"key": "allergy",
									"value": "gluten"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllMenus by Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/menu/category?category=dessert",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"menu",
								"category"
							],
							"query": [
								{
									"key": "category",
									"value": "dessert"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllMenus by ChefsChoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/menu/chefsChoice?choice=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"menu",
								"chefsChoice"
							],
							"query": [
								{
									"key": "choice",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "!GetAllMenus by ChefsChoice not valid Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid Path Variable or Request Parameter\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/menu/chefsChoice?choice=Oui",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"menu",
								"chefsChoice"
							],
							"query": [
								{
									"key": "choice",
									"value": "Oui"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "!GetAllMenus under Price not valid Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid Path Variable or Request Parameter\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/menu/price/low?price=sehrViel",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"menu",
								"price",
								"low"
							],
							"query": [
								{
									"key": "price",
									"value": "sehrViel"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "!GetAllMenus over Price not valid Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid Path Variable or Request Parameter\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/menu/price/high?price=sehrWenig",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"menu",
								"price",
								"high"
							],
							"query": [
								{
									"key": "price",
									"value": "sehrWenig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllMenus with dietaryRequirement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/menu/dieteryRequirements?requirement=vegan",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"menu",
								"dieteryRequirements"
							],
							"query": [
								{
									"key": "requirement",
									"value": "vegan"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllMenus under Price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/menu/price/low?price=50",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"menu",
								"price",
								"low"
							],
							"query": [
								{
									"key": "price",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllMenus over Price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/menu/price/high?price=50",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"menu",
								"price",
								"high"
							],
							"query": [
								{
									"key": "price",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllMenus between Price and Price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/menu/price/between?price1=50&price2=100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"menu",
								"price",
								"between"
							],
							"query": [
								{
									"key": "price1",
									"value": "50"
								},
								{
									"key": "price2",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "!GetAllMenus between Price and Price not valid Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid Path Variable or Request Parameter\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/menu/price/between?price1=sehrWenig&price2=sehrViel",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"menu",
								"price",
								"between"
							],
							"query": [
								{
									"key": "price1",
									"value": "sehrWenig"
								},
								{
									"key": "price2",
									"value": "sehrViel"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetMenu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/menu/9cd13896-e2c2-4e8a-972d-5a56add46403",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"menu",
								"9cd13896-e2c2-4e8a-972d-5a56add46403"
							]
						}
					},
					"response": []
				},
				{
					"name": "!GetMenu Wrong UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Menu not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/menu/9cd13896-e2c2-4e8a-972d-5a56add46405",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"menu",
								"9cd13896-e2c2-4e8a-972d-5a56add46405"
							]
						}
					},
					"response": []
				},
				{
					"name": "!GetMenu Not UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid UUID format!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/menu/9cd13896-e2c2-",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"menu",
								"9cd13896-e2c2-"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ReservationController",
			"item": [
				{
					"name": "GetAllReservations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateReservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"18:30\",\r\n  \"date\": \"2025-08-12\",\r\n  \"partySize\": 5,\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!CreateReservation no Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Request body is unreadable, is missing or malformed. Please check your JSON structure and data types.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateReservation no Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Request body is unreadable, is missing or malformed. Please check your JSON structure and data types.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/bb219131-2e78-420f-9141-523e23ac32a9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								"bb219131-2e78-420f-9141-523e23ac32a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "!CreateReservation no Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Name can't be empty.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"18:30\",\r\n  \"date\": \"2025-08-12\",\r\n  \"partySize\": 5\r\n  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateReservation no Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Name can't be empty.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"18:30\",\r\n  \"date\": \"2025-08-12\",\r\n  \"partySize\": 5\r\n  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/bb219131-2e78-420f-9141-523e23ac32a9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								"bb219131-2e78-420f-9141-523e23ac32a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "!CreateReservation Time malformed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Request body is unreadable, is missing or malformed. Please check your JSON structure and data types.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"38:30\",\r\n  \"date\": \"2025-08-12\",\r\n  \"partySize\": 5,\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateReservation Time malformed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Request body is unreadable, is missing or malformed. Please check your JSON structure and data types.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"38:30\",\r\n  \"date\": \"2025-08-12\",\r\n  \"partySize\": 5,\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/bb219131-2e78-420f-9141-523e23ac32a9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								"bb219131-2e78-420f-9141-523e23ac32a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateReservation Time less than 24h",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Reservation cannot be updated by emergencies please contact Admin.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"18:00\",\r\n  \"date\": \"2025-06-18\",\r\n  \"partySize\": 5,\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/bb219131-2e78-420f-9141-523e23ac32a9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								"bb219131-2e78-420f-9141-523e23ac32a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "!CreateReservation Time was already",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Reservation time must be in the future.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"00:30\",\r\n  \"date\": \"2025-06-18\",\r\n  \"partySize\": 5,\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateReservation Time was already",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Reservation time must be in the future.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"00:30\",\r\n  \"date\": \"2025-06-18\",\r\n  \"partySize\": 5,\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/bb219131-2e78-420f-9141-523e23ac32a9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								"bb219131-2e78-420f-9141-523e23ac32a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "!CreateReservation Date was already",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Reservation date must be today or in the future.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"00:30\",\r\n  \"date\": \"2024-06-12\",\r\n  \"partySize\": 5,\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateReservation Date was already",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Reservation date must be today or in the future.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"00:30\",\r\n  \"date\": \"2024-06-12\",\r\n  \"partySize\": 5,\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/bb219131-2e78-420f-9141-523e23ac32a9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								"bb219131-2e78-420f-9141-523e23ac32a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "!CreateReservation Partysize under 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Party size must be at least 1!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"00:30\",\r\n  \"date\": \"2025-08-12\",\r\n  \"partySize\": -5,\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateReservation Partysize under 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Party size must be at least 1!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"00:30\",\r\n  \"date\": \"2025-08-12\",\r\n  \"partySize\": -5,\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/bb219131-2e78-420f-9141-523e23ac32a9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								"bb219131-2e78-420f-9141-523e23ac32a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "!CreateReservation Partysize malformed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Request body is unreadable, is missing or malformed. Please check your JSON structure and data types.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"00:30\",\r\n  \"date\": \"2025-08-12\",\r\n  \"partySize\": \"hallo\",\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateReservation Partysize malformed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Request body is unreadable, is missing or malformed. Please check your JSON structure and data types.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"00:30\",\r\n  \"date\": \"2025-08-12\",\r\n  \"partySize\": \"hallo\",\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/bb219131-2e78-420f-9141-523e23ac32a9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								"bb219131-2e78-420f-9141-523e23ac32a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "!CreateReservation no Partysize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Party size can't be null.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"00:30\",\r\n  \"date\": \"2025-08-12\",\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateReservation no Partysize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Party size can't be null.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"00:30\",\r\n  \"date\": \"2025-08-12\",\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/bb219131-2e78-420f-9141-523e23ac32a9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								"bb219131-2e78-420f-9141-523e23ac32a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "!CreateReservation no Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Date can't be null.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"18:30\",\r\n  \"partySize\": 5,\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!CreateReservation no Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Date can't be null.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"18:30\",\r\n  \"partySize\": 5,\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/bb219131-2e78-420f-9141-523e23ac32a9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								"bb219131-2e78-420f-9141-523e23ac32a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "!CreateReservation Date malformed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Request body is unreadable, is missing or malformed. Please check your JSON structure and data types.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"18:30\",\r\n  \"date\": \"2025-12\",\r\n  \"partySize\": 5,\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateReservation Date malformed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Request body is unreadable, is missing or malformed. Please check your JSON structure and data types.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"18:30\",\r\n  \"date\": \"2025-12\",\r\n  \"partySize\": 5,\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/bb219131-2e78-420f-9141-523e23ac32a9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								"bb219131-2e78-420f-9141-523e23ac32a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "!CreateReservation no Time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Time can't be null.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"date\": \"2025-08-12\",\r\n  \"partySize\": 5,\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateReservation no Time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Time can't be null.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"date\": \"2025-08-12\",\r\n  \"partySize\": 5,\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/bb219131-2e78-420f-9141-523e23ac32a9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								"bb219131-2e78-420f-9141-523e23ac32a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetReservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/c7b51d10-accb-4bce-899a-051e9da21a50",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								"c7b51d10-accb-4bce-899a-051e9da21a50"
							]
						}
					},
					"response": []
				},
				{
					"name": "!GetReservation Wrong UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"No reservation found with this id!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/c7b51d10-accb-4bce-899a-051e9da21a55",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								"c7b51d10-accb-4bce-899a-051e9da21a55"
							]
						}
					},
					"response": []
				},
				{
					"name": "!GetReservation Not UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid UUID format!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/c7b51d10-accb",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								"c7b51d10-accb"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateReservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"time\": \"18:45\",\r\n    \"date\": \"2025-07-13\",\r\n    \"partySize\": 2,\r\n    \"name\": \"Maitre Ziegler\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/bb219131-2e78-420f-9141-523e23ac32a9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								"bb219131-2e78-420f-9141-523e23ac32a9"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DrinkController",
			"item": [
				{
					"name": "GetAllDrinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/drink/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"drink",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllDrinks by alcoholic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/drink/alcoholic?alcoholic=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"drink",
								"alcoholic"
							],
							"query": [
								{
									"key": "alcoholic",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "!GetAllDrinks by alcoholic not valid Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid Path Variable or Request Parameter\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/drink/alcoholic?alcoholic=Oui",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"drink",
								"alcoholic"
							],
							"query": [
								{
									"key": "alcoholic",
									"value": "Oui"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllDrinks by Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/drink/category?category=wine",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"drink",
								"category"
							],
							"query": [
								{
									"key": "category",
									"value": "wine"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllDrinks count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/drink/count",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"drink",
								"count"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllDrinks less than Price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/drink/price/less?price=30",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"drink",
								"price",
								"less"
							],
							"query": [
								{
									"key": "price",
									"value": "30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllDrinks between price and price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/drink/price/between?start=50&end=100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"drink",
								"price",
								"between"
							],
							"query": [
								{
									"key": "start",
									"value": "50"
								},
								{
									"key": "end",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "!GetAllDrinks between price and price not valid Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid Path Variable or Request Parameter\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/drink/price/between?start=wenig&end=mittel",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"drink",
								"price",
								"between"
							],
							"query": [
								{
									"key": "start",
									"value": "wenig"
								},
								{
									"key": "end",
									"value": "mittel"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllDrinks greater than Price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/drink/price/greater?price=100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"drink",
								"price",
								"greater"
							],
							"query": [
								{
									"key": "price",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "!GetAllDrinks less than Price not valid Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid Path Variable or Request Parameter\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/drink/price/less?price=mittel",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"drink",
								"price",
								"less"
							],
							"query": [
								{
									"key": "price",
									"value": "mittel"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "!GetAllDrinks greater than Price not valid Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid Path Variable or Request Parameter\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/drink/price/greater?price=mittel",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"drink",
								"price",
								"greater"
							],
							"query": [
								{
									"key": "price",
									"value": "mittel"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AdminReservationController",
			"item": [
				{
					"name": "!UpdateReservation no Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Request body is unreadable, is missing or malformed. Please check your JSON structure and data types.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/reservation/bb219131-2e78-420f-9141-523e23ac32a9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"reservation",
								"bb219131-2e78-420f-9141-523e23ac32a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateReservation no Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Name can't be empty.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"18:30\",\r\n  \"date\": \"2025-08-12\",\r\n  \"partySize\": 5\r\n  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/reservation/bb219131-2e78-420f-9141-523e23ac32a9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"reservation",
								"bb219131-2e78-420f-9141-523e23ac32a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateReservation Time malformed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Request body is unreadable, is missing or malformed. Please check your JSON structure and data types.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"38:30\",\r\n  \"date\": \"2025-08-12\",\r\n  \"partySize\": 5,\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/reservation/bb219131-2e78-420f-9141-523e23ac32a9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"reservation",
								"bb219131-2e78-420f-9141-523e23ac32a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateReservation Time less than 24h",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Reservation cannot be updated by emergencies please contact Admin.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"11:00\",\r\n  \"date\": \"2025-06-18\",\r\n  \"partySize\": 5,\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/reservation/bb219131-2e78-420f-9141-523e23ac32a9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"reservation",
								"bb219131-2e78-420f-9141-523e23ac32a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateReservation Time was already",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Reservation time must be in the future.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"00:30\",\r\n  \"date\": \"2025-06-18\",\r\n  \"partySize\": 5,\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/reservation/bb219131-2e78-420f-9141-523e23ac32a9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"reservation",
								"bb219131-2e78-420f-9141-523e23ac32a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateReservation Date was already",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Reservation date must be today or in the future.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"00:30\",\r\n  \"date\": \"2024-06-12\",\r\n  \"partySize\": 5,\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/reservation/bb219131-2e78-420f-9141-523e23ac32a9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"reservation",
								"bb219131-2e78-420f-9141-523e23ac32a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateReservation Partysize under 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Party size must be at least 1!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"00:30\",\r\n  \"date\": \"2025-08-12\",\r\n  \"partySize\": -5,\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/reservation/bb219131-2e78-420f-9141-523e23ac32a9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"reservation",
								"bb219131-2e78-420f-9141-523e23ac32a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateReservation Partysize malformed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Request body is unreadable, is missing or malformed. Please check your JSON structure and data types.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"00:30\",\r\n  \"date\": \"2025-08-12\",\r\n  \"partySize\": \"hallo\",\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/reservation/admin/bb219131-2e78-420f-9141-523e23ac32a9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"reservation",
								"admin",
								"bb219131-2e78-420f-9141-523e23ac32a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateReservation no Partysize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Party size can't be null.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"00:30\",\r\n  \"date\": \"2025-08-12\",\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/reservation/bb219131-2e78-420f-9141-523e23ac32a9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"reservation",
								"bb219131-2e78-420f-9141-523e23ac32a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "!CreateReservation no Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Date can't be null.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"18:30\",\r\n  \"partySize\": 5,\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/reservation/bb219131-2e78-420f-9141-523e23ac32a9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"reservation",
								"bb219131-2e78-420f-9141-523e23ac32a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateReservation Date malformed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Request body is unreadable, is missing or malformed. Please check your JSON structure and data types.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"time\": \"18:30\",\r\n  \"date\": \"2025-12\",\r\n  \"partySize\": 5,\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/reservation/bb219131-2e78-420f-9141-523e23ac32a9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"reservation",
								"bb219131-2e78-420f-9141-523e23ac32a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateReservation no Time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Time can't be null.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"date\": \"2025-08-12\",\r\n  \"partySize\": 5,\r\n  \"name\": \"Bernd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/reservation/bb219131-2e78-420f-9141-523e23ac32a9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"reservation",
								"bb219131-2e78-420f-9141-523e23ac32a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateReservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"time\": \"18:45\",\r\n    \"date\": \"2025-07-13\",\r\n    \"partySize\": 2,\r\n    \"name\": \"Maitre Ziegler\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/reservation/bb219131-2e78-420f-9141-523e23ac32a9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"reservation",
								"bb219131-2e78-420f-9141-523e23ac32a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteReservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/reservation/b09188fa-1d3b-4d14-9690-ad29ac5db433",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"reservation",
								"b09188fa-1d3b-4d14-9690-ad29ac5db433"
							]
						}
					},
					"response": []
				},
				{
					"name": "!DeleteReservation not exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"This reservation doesn't exists\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/reservation/b09188fa-1d3b-4d14-9690-ad29ac5db435",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"reservation",
								"b09188fa-1d3b-4d14-9690-ad29ac5db435"
							]
						}
					},
					"response": []
				},
				{
					"name": "!DeleteReservation IV UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid UUID format!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/reservation/afdasfas",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"reservation",
								"afdasfas"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetCount by partySize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/reservation/partySize?partySize=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"reservation",
								"partySize"
							],
							"query": [
								{
									"key": "partySize",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetReservation by date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/reservation/date?date=2025-08-24",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"reservation",
								"date"
							],
							"query": [
								{
									"key": "date",
									"value": "2025-08-24"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetReservation by Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/reservation/customer?name=Senator Rossi&date=2026-08-21",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"reservation",
								"customer"
							],
							"query": [
								{
									"key": "name",
									"value": "Senator Rossi"
								},
								{
									"key": "date",
									"value": "2026-08-21"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "!GetReservation by Name IV Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid Path Variable or Request Parameter\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/reservation/customer?name=Senator Rasfsasi&date=2026-08-213",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"reservation",
								"customer"
							],
							"query": [
								{
									"key": "name",
									"value": "Senator Rasfsasi"
								},
								{
									"key": "date",
									"value": "2026-08-213"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "!GetReservation by date IV Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid Path Variable or Request Parameter\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/reservation/date?date=2025-0",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"reservation",
								"date"
							],
							"query": [
								{
									"key": "date",
									"value": "2025-0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetCount by partySize IV Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid Path Variable or Request Parameter\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/reservation/partySize?partySize=sdfa",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"reservation",
								"partySize"
							],
							"query": [
								{
									"key": "partySize",
									"value": "sdfa"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetCount from all Reservations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/reservation/count",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"reservation",
								"count"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AdminMenuController",
			"item": [
				{
					"name": "GetCount from all Menus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/menu/count",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"menu",
								"count"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateMenu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Pasta\",\r\n  \"price\": 41,\r\n  \"category\": \"main\",\r\n  \"dietaryRequirements\": \"vegan\",\r\n  \"allergies\": \"gluten\",\r\n  \"description\": \"lecker\",\r\n  \"chefsChoice\": true,\r\n  \"pictureLink\": \"null\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/menu/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"menu",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateMenu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Risotto al Tartufo\",\r\n    \"price\": 50,\r\n    \"category\": \"main\",\r\n    \"dietaryRequirements\": \"vegetarian\",\r\n    \"allergies\": \"dairy\",\r\n    \"description\": \"Creamy truffle risotto finished with aged parmesan.\",\r\n    \"chefsChoice\": true,\r\n    \"pictureLink\": \"https://www.donnamoderna.com/content/uploads/2014/04/risotto-con-spumante-castelmagno-e-tartufo-e1580313246484-830x625.jpg\"\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/menu/757f7859-f5be-4c3f-9b49-3afb1f113f5a",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"menu",
								"757f7859-f5be-4c3f-9b49-3afb1f113f5a"
							]
						}
					},
					"response": []
				},
				{
					"name": "!CreateMenu empty Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Name can't be empty.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"price\": 41,\r\n  \"category\": \"main\",\r\n  \"dietaryRequirements\": \"vegan\",\r\n  \"allergies\": \"gluten\",\r\n  \"description\": \"lecker\",\r\n  \"chefsChoice\": true,\r\n  \"pictureLink\": \"null\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/menu/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"menu",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateMenu empty Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Name can't be empty.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"price\": 41,\r\n  \"category\": \"main\",\r\n  \"dietaryRequirements\": \"vegan\",\r\n  \"allergies\": \"gluten\",\r\n  \"description\": \"lecker\",\r\n  \"chefsChoice\": true,\r\n  \"pictureLink\": \"null\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/menu/757f7859-f5be-4c3f-9b49-3afb1f113f5a",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"menu",
								"757f7859-f5be-4c3f-9b49-3afb1f113f5a"
							]
						}
					},
					"response": []
				},
				{
					"name": "!CreateMenu missing Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Request body is unreadable, is missing or malformed. Please check your JSON structure and data types.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/menu/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"menu",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateMenu missing Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Request body is unreadable, is missing or malformed. Please check your JSON structure and data types.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/menu/757f7859-f5be-4c3f-9b49-3afb1f113f5a",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"menu",
								"757f7859-f5be-4c3f-9b49-3afb1f113f5a"
							]
						}
					},
					"response": []
				},
				{
					"name": "!CreateMenu empty ChefsChoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Chef's choice can't be null.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Pasta\",\r\n  \"price\": 41,\r\n  \"category\": \"main\",\r\n  \"dietaryRequirements\": \"vegan\",\r\n  \"allergies\": \"gluten\",\r\n  \"description\": \"lecker\",\r\n  \"pictureLink\": \"null\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/menu/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"menu",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateMenu empty ChefsChoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Chef's choice can't be null.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Pasta\",\r\n  \"price\": 41,\r\n  \"category\": \"main\",\r\n  \"dietaryRequirements\": \"vegan\",\r\n  \"allergies\": \"gluten\",\r\n  \"description\": \"lecker\",\r\n  \"pictureLink\": \"null\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/menu/757f7859-f5be-4c3f-9b49-3afb1f113f5a",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"menu",
								"757f7859-f5be-4c3f-9b49-3afb1f113f5a"
							]
						}
					},
					"response": []
				},
				{
					"name": "!CreateMenu empty dietaryRequirement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Dietary requirements can't be empty.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Pasta\",\r\n  \"price\": 41,\r\n  \"category\": \"main\",\r\n  \"dietaryRequirements\": \"\",\r\n  \"allergies\": \"gluten\",\r\n  \"description\": \"lecker\",\r\n  \"chefsChoice\": true,\r\n  \"pictureLink\": \"null\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/menu/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"menu",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateMenu empty dietaryRequirement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Dietary requirements can't be empty.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Pasta\",\r\n  \"price\": 41,\r\n  \"category\": \"main\",\r\n  \"dietaryRequirements\": \"\",\r\n  \"allergies\": \"gluten\",\r\n  \"description\": \"lecker\",\r\n  \"chefsChoice\": true,\r\n  \"pictureLink\": \"null\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/menu/757f7859-f5be-4c3f-9b49-3afb1f113f5a",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"menu",
								"757f7859-f5be-4c3f-9b49-3afb1f113f5a"
							]
						}
					},
					"response": []
				},
				{
					"name": "!CreateMenu empty category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Category can't be empty.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Pasta\",\r\n  \"price\": 41,\r\n  \"category\": \"\",\r\n  \"dietaryRequirements\": \"vegan\",\r\n  \"allergies\": \"gluten\",\r\n  \"description\": \"lecker\",\r\n  \"chefsChoice\": true,\r\n  \"pictureLink\": \"null\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/menu/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"menu",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateMenu empty category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Category can't be empty.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Pasta\",\r\n  \"price\": 41,\r\n  \"category\": \"\",\r\n  \"dietaryRequirements\": \"vegan\",\r\n  \"allergies\": \"gluten\",\r\n  \"description\": \"lecker\",\r\n  \"chefsChoice\": true,\r\n  \"pictureLink\": \"null\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/menu/757f7859-f5be-4c3f-9b49-3afb1f113f5a",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"menu",
								"757f7859-f5be-4c3f-9b49-3afb1f113f5a"
							]
						}
					},
					"response": []
				},
				{
					"name": "!CreateMenu empty Price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Price can't be null.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Pasta\",\r\n  \"category\": \"main\",\r\n  \"dietaryRequirements\": \"vegan\",\r\n  \"allergies\": \"gluten\",\r\n  \"description\": \"lecker\",\r\n  \"chefsChoice\": true,\r\n  \"pictureLink\": \"null\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/menu/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"menu",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateMenu empty Price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Price can't be null.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Pasta\",\r\n  \"category\": \"main\",\r\n  \"dietaryRequirements\": \"vegan\",\r\n  \"allergies\": \"gluten\",\r\n  \"description\": \"lecker\",\r\n  \"chefsChoice\": true,\r\n  \"pictureLink\": \"null\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/menu/757f7859-f5be-4c3f-9b49-3afb1f113f5a",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"menu",
								"757f7859-f5be-4c3f-9b49-3afb1f113f5a"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteMenu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/menu/e9cca8c8-9df6-4e95-818f-2f47ecb2457a",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"menu",
								"e9cca8c8-9df6-4e95-818f-2f47ecb2457a"
							]
						}
					},
					"response": []
				},
				{
					"name": "!DeleteMenu not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Menu not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/menu/e9cca8c8-9df6-4e95-818f-2f47ecb24575",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"menu",
								"e9cca8c8-9df6-4e95-818f-2f47ecb24575"
							]
						}
					},
					"response": []
				},
				{
					"name": "!DeleteMenu IV UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid UUID format!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/menu/e9cca8c8-9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"menu",
								"e9cca8c8-9"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AdminDrinkController",
			"item": [
				{
					"name": "GetDrink by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/drink/642c8d7e-d021-4e60-8f7b-ff48d1e94498",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"drink",
								"642c8d7e-d021-4e60-8f7b-ff48d1e94498"
							]
						}
					},
					"response": []
				},
				{
					"name": "!GetDrink by ID IV UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid UUID format!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/drink/642c8d7e-d",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"drink",
								"642c8d7e-d"
							]
						}
					},
					"response": []
				},
				{
					"name": "!GetDrink by ID not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"There is no Drink with this id!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/drink/642c8d7e-d021-4e60-8f7b-ff48d1e94499",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"drink",
								"642c8d7e-d021-4e60-8f7b-ff48d1e94499"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteDrink",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/drink/98ed5a4e-d358-4764-9b08-c8e1c3cdd4ee",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"drink",
								"98ed5a4e-d358-4764-9b08-c8e1c3cdd4ee"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteDrink IV UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid UUID format!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/drink/98ed5a4e-",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"drink",
								"98ed5a4e-"
							]
						}
					},
					"response": []
				},
				{
					"name": "!DeleteDrink not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"There is no Drink with this id!\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/drink/98ed5a4e-d358-4764-9b08-c8e1c3cdd4ef",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"drink",
								"98ed5a4e-d358-4764-9b08-c8e1c3cdd4ef"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateDrink",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Hugo\",\r\n  \"price\": 17,\r\n  \"description\": \"frisch\",\r\n  \"pictureLink\": \"null\",\r\n  \"alcoholic\": true,\r\n  \"volume\": 0.5,\r\n  \"category\": \"cocktail\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/drink/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"drink",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateDrink",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Japanese Umeshu Plum Wine\",\r\n    \"price\": 50,\r\n    \"description\": \"Sweet-sour flavor with subtle fruit notes\",\r\n    \"pictureLink\": \"https://cdn11.bigcommerce.com/s-ji18vmeuwa/products/1132/images/1390/10243-1-Gekkeikan-Umeshu-Plum-Wine-Large%25253Fw%25253D1200%252526h%25253D1200%252526sm%25253Dc%252526fmt%25253Dauto__58051.1687531340.1280.1280.jpg?c=1\",\r\n    \"alcoholic\": true,\r\n    \"volume\": 0.5,\r\n    \"category\": \"wine\"\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/drink/8c7bff15-dfd1-4f31-96e4-e1189ef0bcb3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"drink",
								"8c7bff15-dfd1-4f31-96e4-e1189ef0bcb3"
							]
						}
					},
					"response": []
				},
				{
					"name": "!CreateDrink empty Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Name can't be empty.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"price\": 17,\r\n  \"description\": \"frisch\",\r\n  \"pictureLink\": \"null\",\r\n  \"alcoholic\": true,\r\n  \"volume\": 0.5,\r\n  \"category\": \"cocktail\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/drink/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"drink",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateDrink empty Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Name can't be empty.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"price\": 17,\r\n  \"description\": \"frisch\",\r\n  \"pictureLink\": \"null\",\r\n  \"alcoholic\": true,\r\n  \"volume\": 0.5,\r\n  \"category\": \"cocktail\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/drink/8c7bff15-dfd1-4f31-96e4-e1189ef0bcb3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"drink",
								"8c7bff15-dfd1-4f31-96e4-e1189ef0bcb3"
							]
						}
					},
					"response": []
				},
				{
					"name": "!CreateDrink missing Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Request body is unreadable, is missing or malformed. Please check your JSON structure and data types.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/drink/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"drink",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateDrink missing Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Request body is unreadable, is missing or malformed. Please check your JSON structure and data types.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/drink/8c7bff15-dfd1-4f31-96e4-e1189ef0bcb3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"drink",
								"8c7bff15-dfd1-4f31-96e4-e1189ef0bcb3"
							]
						}
					},
					"response": []
				},
				{
					"name": "!CreateDrink empty Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"A drink has to have a category\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Hugo\",\r\n  \"price\": 17,\r\n  \"description\": \"frisch\",\r\n  \"pictureLink\": \"null\",\r\n  \"alcoholic\": true,\r\n  \"volume\": 0.5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/drink/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"drink",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateDrink empty Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"A drink has to have a category\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Hugo\",\r\n  \"price\": 17,\r\n  \"description\": \"frisch\",\r\n  \"pictureLink\": \"null\",\r\n  \"alcoholic\": true,\r\n  \"volume\": 0.5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/drink/8c7bff15-dfd1-4f31-96e4-e1189ef0bcb3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"drink",
								"8c7bff15-dfd1-4f31-96e4-e1189ef0bcb3"
							]
						}
					},
					"response": []
				},
				{
					"name": "!CreateDrink empty Volume",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Volume can't be null.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Hugo\",\r\n  \"price\": 17,\r\n  \"description\": \"frisch\",\r\n  \"pictureLink\": \"null\",\r\n  \"alcoholic\": true,\r\n  \"category\": \"cocktail\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/drink/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"drink",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateDrink empty Volume",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Volume can't be null.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Hugo\",\r\n  \"price\": 17,\r\n  \"description\": \"frisch\",\r\n  \"pictureLink\": \"null\",\r\n  \"alcoholic\": true,\r\n  \"category\": \"cocktail\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/drink/8c7bff15-dfd1-4f31-96e4-e1189ef0bcb3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"drink",
								"8c7bff15-dfd1-4f31-96e4-e1189ef0bcb3"
							]
						}
					},
					"response": []
				},
				{
					"name": "!CreateDrink empty Alcoholic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Alcoholic must be specified.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Hugo\",\r\n  \"price\": 17,\r\n  \"description\": \"frisch\",\r\n  \"pictureLink\": \"null\",\r\n  \"volume\": 0.5,\r\n  \"category\": \"cocktail\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/drink/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"drink",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateDrink empty Alcoholic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Alcoholic must be specified.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Hugo\",\r\n  \"price\": 17,\r\n  \"description\": \"frisch\",\r\n  \"pictureLink\": \"null\",\r\n  \"volume\": 0.5,\r\n  \"category\": \"cocktail\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/drink/8c7bff15-dfd1-4f31-96e4-e1189ef0bcb3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"drink",
								"8c7bff15-dfd1-4f31-96e4-e1189ef0bcb3"
							]
						}
					},
					"response": []
				},
				{
					"name": "!CreateDrink empty Price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Price can't be null.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Hugo\",\r\n  \"description\": \"frisch\",\r\n  \"pictureLink\": \"null\",\r\n  \"alcoholic\": true,\r\n  \"volume\": 0.5,\r\n  \"category\": \"cocktail\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/drink/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"drink",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!UpdateDrink empty Price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Price can't be null.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Hugo\",\r\n  \"description\": \"frisch\",\r\n  \"pictureLink\": \"null\",\r\n  \"alcoholic\": true,\r\n  \"volume\": 0.5,\r\n  \"category\": \"cocktail\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/admin/drink/8c7bff15-dfd1-4f31-96e4-e1189ef0bcb3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"admin",
								"drink",
								"8c7bff15-dfd1-4f31-96e4-e1189ef0bcb3"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}